<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yk-ddm</title>
  
  
  <link href="https://yk-ddm.github.io/atom.xml" rel="self"/>
  
  <link href="https://yk-ddm.github.io/"/>
  <updated>2021-09-19T05:47:24.649Z</updated>
  <id>https://yk-ddm.github.io/</id>
  
  <author>
    <name>yk-ddm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《微信小程序学习笔记》</title>
    <link href="https://yk-ddm.github.io/posts/20305.html"/>
    <id>https://yk-ddm.github.io/posts/20305.html</id>
    <published>2021-09-19T05:36:26.000Z</published>
    <updated>2021-09-19T05:47:24.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序-—-学习笔记"><a href="#微信小程序-—-学习笔记" class="headerlink" title="微信小程序 —- 学习笔记"></a>微信小程序 —- 学习笔记</h1><hr /><h2 id="微信小程序简介"><a href="#微信小程序简介" class="headerlink" title="微信小程序简介"></a>微信小程序简介</h2><blockquote><p>一种不需要下载安装即可使用的应用</p></blockquote><blockquote><p>实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用</p></blockquote><blockquote><p>状态模式-单向数据流;</p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&token=1701719263">微信小程序 官网</a></p></blockquote><blockquote><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信小程序开发文档</a></p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1&token=&lang=zh_CN">账号注册地址</a></p></blockquote><hr /><h2 id="使用笔记"><a href="#使用笔记" class="headerlink" title="使用笔记"></a>使用笔记</h2><blockquote><p>查询 微信小程序账号 AppID </p></blockquote><p><img src="https://img-blog.csdnimg.cn/b867cd87bbdf49e9b11a4a65d09b86f5.png" alt="在这里插入图片描述"></p><blockquote><p><a href="https://mp.weixin.qq.com/wxamp/basicprofile/index?token=1701719263&lang=zh_CN">查看 地址</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/b79937bf069f4c10aa008a36bb72612e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeWstZGRt,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr /><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://img-blog.csdnimg.cn/2113796ec7294ae9acd20d0a0f09f694.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeWstZGRt,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr /><h3 id="实例demo"><a href="#实例demo" class="headerlink" title="实例demo"></a>实例demo</h3><blockquote><p>Hello World !</p></blockquote><blockquote><p>代码展示，如下：</p></blockquote><pre><code class="js">//index.js//获取应用实例const app = getApp()Page(&#123;  data: &#123;    str: &#39;Hello World !&#39;  &#125;,  onLoad: function () &#123;  &#125;&#125;)</code></pre><blockquote><p>页面结构代码，如下：</p></blockquote><pre><code class="wxml">&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot;&gt;    &lt;!-- 数据绑定  &#123;&#123;&#125;&#125;   绑定内容 -->    &#123;&#123; str &#125;&#125;&lt;/view&gt;</code></pre><blockquote><p>效果展示，如下：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/1f5eecda6c7047e7a5192f2d062da195.png" alt="在这里插入图片描述"></p><blockquote><p>input 的 <code>bindinput</code> 事件触发对象 event 详情</p></blockquote><p><img src="https://img-blog.csdnimg.cn/9bb78a8b15834be39cef9f353adcec1f.png" alt="在这里插入图片描述"></p><blockquote><p>在微信小程序中实现数据双向绑定</p></blockquote><blockquote><p>页面结构代码，如下：</p></blockquote><pre><code class="wxml">&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot;&gt;    &lt;view class=&quot;form-item&quot;&gt;        &lt;input type=&quot;text&quot; value=&quot;&#123;&#123; myForm.username &#125;&#125;&quot; bindinput=&quot;changeUsername&quot; data-name=&quot;username&quot; placeholder=&quot;请输入您的姓名&quot; focus=&quot;&#123;&#123; true &#125;&#125;&quot;/&gt;    &lt;/view&gt;    模拟数据双向绑定 --- &#123;&#123; myForm.username &#125;&#125;&lt;/view&gt;</code></pre><blockquote><p>逻辑代码，js 如下：</p></blockquote><pre><code class="js">//index.js//获取应用实例const app = getApp()Page(&#123;    data: &#123;        myForm: &#123;            username: &#39;yk-ddm&#39;        &#125;    &#125;,    onLoad: function() &#123;&#125;,    changeUsername: function(e) &#123;      var that = this,          currentTarget = e.currentTarget,          dataset = currentTarget.dataset,          key = dataset.name,          value = e.detail.value,          myForm = &quot;myForm.&quot; + key            that.setData(&#123;        [myForm]: value      &#125;)    &#125;&#125;)</code></pre><blockquote><p>代码截图展示，如下：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/b8c7d954d72e4478abdd6684e4070b47.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeWstZGRt,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr /><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><blockquote><p><code>Cannot delete property &#39;WeixinJSBridge&#39; of #&lt;Window&gt;</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/fb26a9d382d24a0e8ca2c78d3d63a300.png" alt="在这里插入图片描述"></p><blockquote><p>解决方法：尝试更换调试基础库</p></blockquote><p><img src="https://img-blog.csdnimg.cn/a38f07bd91e84a27bc24c9d274c43d47.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeWstZGRt,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">《微信小程序学习笔记》</summary>
    
    
    
    <category term="微信小程序" scheme="https://yk-ddm.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="https://yk-ddm.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="小程序" scheme="https://yk-ddm.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="wxml" scheme="https://yk-ddm.github.io/tags/wxml/"/>
    
    <category term="wxss" scheme="https://yk-ddm.github.io/tags/wxss/"/>
    
    <category term="javascript" scheme="https://yk-ddm.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>《Node.js 学习笔记之服务器静态资源托管服务》</title>
    <link href="https://yk-ddm.github.io/posts/10535.html"/>
    <id>https://yk-ddm.github.io/posts/10535.html</id>
    <published>2021-09-14T08:06:57.000Z</published>
    <updated>2021-09-14T11:30:52.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《Node-js-学习笔记之服务器静态资源托管服务》"><a href="#《Node-js-学习笔记之服务器静态资源托管服务》" class="headerlink" title="《Node.js 学习笔记之服务器静态资源托管服务》"></a>《Node.js 学习笔记之服务器静态资源托管服务》</h1><h2 id="引入-http-服务"><a href="#引入-http-服务" class="headerlink" title="引入 http 服务"></a>引入 http 服务</h2><blockquote><p>const http = require(‘http’)</p></blockquote><h2 id="开启服务器并指定端口"><a href="#开启服务器并指定端口" class="headerlink" title="开启服务器并指定端口"></a>开启服务器并指定端口</h2><pre><code class="Node.js">const server = http.createServer((req,res) =&gt; &#123;    // code &#125;).listen(3000,() =&gt; &#123;    console.log(&#39;服务开启成功, 请访问 http://localhost:3000/&#39;)&#125;)</code></pre><h2 id="express-中间件的使用"><a href="#express-中间件的使用" class="headerlink" title="express 中间件的使用"></a>express 中间件的使用</h2><blockquote><p>它是处理过程中的一个环节; 是一个函数</p></blockquote><blockquote><p>可以执行任何代码</p></blockquote><blockquote><p>可以修改请求和响应对象</p></blockquote><blockquote><p>可以终结请求-响应循环</p></blockquote><blockquote><p>可以调用堆栈中的下一个中间件</p></blockquote><h3 id="引入-express"><a href="#引入-express" class="headerlink" title="引入 express"></a>引入 express</h3><blockquote><p>const express = require(‘express’)</p></blockquote><h3 id="返回对象"><a href="#返回对象" class="headerlink" title="返回对象"></a>返回对象</h3><blockquote><p>const app = express()</p></blockquote><h3 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h3><blockquote><p>app.use(express.static(‘test’))</p></blockquote><blockquote><p>app.listen(3000, () =&gt; {<br>    console.log(‘Node 服务开启成功！’)<br>})</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《Node-js-学习笔记之服务器静态资源托管服务》&quot;&gt;&lt;a href=&quot;#《Node-js-学习笔记之服务器静态资源托管服务》&quot; class=&quot;headerlink&quot; title=&quot;《Node.js 学习笔记之服务器静态资源托管服务》&quot;&gt;&lt;/a&gt;《Node.js</summary>
      
    
    
    
    <category term="Node.js" scheme="https://yk-ddm.github.io/categories/Node-js/"/>
    
    
    <category term="Node.js" scheme="https://yk-ddm.github.io/tags/Node-js/"/>
    
    <category term="js" scheme="https://yk-ddm.github.io/tags/js/"/>
    
    <category term="express" scheme="https://yk-ddm.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>《CSS（层叠样式表） 学习笔记之 cursor》</title>
    <link href="https://yk-ddm.github.io/posts/2312.html"/>
    <id>https://yk-ddm.github.io/posts/2312.html</id>
    <published>2021-09-13T02:19:22.000Z</published>
    <updated>2021-09-17T07:10:51.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《CSS（层叠样式表）-学习笔记之-cursor》"><a href="#《CSS（层叠样式表）-学习笔记之-cursor》" class="headerlink" title="《CSS（层叠样式表） 学习笔记之 cursor》"></a>《CSS（层叠样式表） 学习笔记之 cursor》</h1><h2 id="cursor-简介"><a href="#cursor-简介" class="headerlink" title="cursor 简介"></a>cursor 简介</h2><blockquote><p>cursor 是 CSS 属性设置光标的类型（如果有），在鼠标指针悬停在元素上时显示相应样式</p></blockquote><pre><code class="css">cursor: help;cursor: wait;cursor: crosshair;cursor: not-allowed;cursor: zoom-in;cursor: grab;</code></pre><blockquote><p>cursor: help; 指示帮助 效果如下：</p></blockquote><img alt="cursor: help;" width=400 height=300 src="https://img-blog.csdnimg.cn/8157d993627349cf8f6dbf3cfec66a76.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeWstZGRt,size_1,color_FFFFFF,t_70,g_se,x_16#pic_center" /><blockquote><p>cursor: wait;  效果如下：</p></blockquote><img alt="cursor: wait;" width=400 height=300 src="https://gitee.com/yk-ddm/picx_drawing_bed/raw/master/images/20210917145508.png" /><blockquote><p>cursor: crosshair;  效果如下：</p></blockquote><img alt="cursor: crosshair;" width=400 height=300 src="https://gitee.com/yk-ddm/picx_drawing_bed/raw/master/images/20210917151016.png" /><blockquote><p>cursor: not-allowed;  效果如下：</p></blockquote><img alt="cursor: not-allowed;" width=400 height=300 src="https://img-blog.csdnimg.cn/4c76617b9a124d148ece43bdeba3d86f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeWstZGRt,size_20,color_FFFFFF,t_70,g_se,x_16" /><blockquote><p>cursor: zoom-in;  效果如下：</p></blockquote><img alt="cursor: zoom-in;" width=400 height=300 src="https://img-blog.csdnimg.cn/3a7ed3679aa444d4802bae92d12b74d0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeWstZGRt,size_20,color_FFFFFF,t_70,g_se,x_16" /><blockquote><p>cursor: grab;  效果如下：</p></blockquote><img alt="cursor: grab;" width=400 height=300 src="https://img-blog.csdnimg.cn/7fe0c4ade1da43fdb37d1ad307780c6f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeWstZGRt,size_20,color_FFFFFF,t_70,g_se,x_16" /><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote><p>cursor属性为零个或多个<url>值，它们之间用逗号分隔，最后必填一个关键字值。每个<url>指向一个图像文件。浏览器将尝试加载指定的第一个图像，如果无法加载则返回下一个图像，如果无法加载图像或未指定图像，则使用关键字值代表的指针类型</p></blockquote><h3 id="关键字值"><a href="#关键字值" class="headerlink" title="关键字值"></a>关键字值</h3><blockquote><p>cursor: pointer;</p></blockquote><img alt="cursor: grab;" width=400 height=300 src="https://img-blog.csdnimg.cn/85e30c4c784e4749b4a8e77afd232c1c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeWstZGRt,size_20,color_FFFFFF,t_70,g_se,x_16" /><blockquote><p>cursor: auto;  浏览器根据当前内容决定指针样式</p></blockquote><blockquote><p>cursor: progress; 程序后台繁忙，用户仍可交互 (与wait相反).</p></blockquote><h3 id="使用-URL，并提供一个关键字值作为备用"><a href="#使用-URL，并提供一个关键字值作为备用" class="headerlink" title="使用 URL，并提供一个关键字值作为备用"></a>使用 URL，并提供一个关键字值作为备用</h3><blockquote><p>cursor: url(hand.cur), pointer;</p></blockquote><blockquote><p>最后必须提供一个非 URL 后备值</p></blockquote><h3 id="URL-和-xy-的坐标偏移值，最后提供一个关键字值作为备用"><a href="#URL-和-xy-的坐标偏移值，最后提供一个关键字值作为备用" class="headerlink" title="URL 和 xy 的坐标偏移值，最后提供一个关键字值作为备用"></a>URL 和 xy 的坐标偏移值，最后提供一个关键字值作为备用</h3><blockquote><p>每个<url>后面都可选跟一对空格分隔的数字<x><y>表示偏移。它们用来设置指针的热点(即自定义图标的实际点击位置)，位置相对于图标的左上角</p></blockquote><blockquote><p>可选 x，y坐标, 两个小于 32 的无单位非负数</p></blockquote><blockquote><p>cursor:  url(cursor1.png) 4 12, auto;</p></blockquote><blockquote><p>cursor:  url(cursor2.png) 2 2, pointer;</p></blockquote><h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><blockquote><p>cursor: inherit;</p></blockquote><blockquote><p>cursor: initial;</p></blockquote><blockquote><p>cursor: unset;</p></blockquote>]]></content>
    
    
    <summary type="html">《CSS（层叠样式表） 学习笔记之 cursor》</summary>
    
    
    
    <category term="CSS" scheme="https://yk-ddm.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://yk-ddm.github.io/tags/CSS/"/>
    
    <category term="Web 开发技术" scheme="https://yk-ddm.github.io/tags/Web-%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    <category term="cursor" scheme="https://yk-ddm.github.io/tags/cursor/"/>
    
  </entry>
  
  <entry>
    <title>《JavaScript 学习笔记 之 日常练习案例》</title>
    <link href="https://yk-ddm.github.io/posts/20068.html"/>
    <id>https://yk-ddm.github.io/posts/20068.html</id>
    <published>2021-09-06T06:42:51.000Z</published>
    <updated>2021-09-17T09:57:15.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-学习笔记"><a href="#JavaScript-学习笔记" class="headerlink" title="JavaScript 学习笔记"></a>JavaScript 学习笔记</h1><hr /><h2 id="日常练习案例"><a href="#日常练习案例" class="headerlink" title="日常练习案例"></a>日常练习案例</h2><hr /><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><pre><code class="js">// &#39;abcEFG&#39;  重新排序 ---&gt; 规则是 把大写字母放前面，小写字母放后面// realization/**    explain：    operationStr 操作字符串    应用了： String.split()  切割字符串返回数组、    Array.join() 将数组中的元素以某种操作符连接起来、    正则表达式的使用 */function operationStr(str)&#123;    return str.split(/[a-z]/g).join(&#39;&#39;) + str.split(/[A-Z]/g).join(&#39;&#39;)&#125;// Testvar str = &#39;abcEFG&#39;,  // expect output: &#39;EFGabc&#39;    result = operationStr(str)console.log(result)  // output: &#39;EFGabc&#39;</code></pre><ul><li><code>查看测试结果</code><br><img src="https://uploadfiles.nowcoder.com/files/20210816/838378582_1629111449561/f5833805ece3444d9df5cbc1587b78e7.png" alt="在这里插入图片描述"></li></ul><h3 id="Boolean-类型学习练习"><a href="#Boolean-类型学习练习" class="headerlink" title="Boolean 类型学习练习"></a>Boolean 类型学习练习</h3><pre><code class="js">/**    explain：    test 自定义变量名称        Boolean类型        new Boolean()  实例化，默认 返回 false    document 文档        document.write()  向页面打印信息，会覆盖页面原有的内容    document.write(&quot;&lt;br /&gt;&quot;)   向页面输出一个换行*/var testtest = new Boolean()document.write(test)document.write(&quot;&lt;br /&gt;&quot;)  // output: falsetest = new Boolean(null)document.write(test)document.write(&quot;&lt;br /&gt;&quot;)  // output: falsetest = new Boolean(&#39;&#39;)   // &#39;&#39; 或 &quot;&quot;document.write(test)document.write(&quot;&lt;br /&gt;&quot;)  // output: falsetest = new Boolean(undefined)document.write(test)document.write(&quot;&lt;br /&gt;&quot;)  // output: falsetest = new Boolean(NaN)document.write(test)document.write(&quot;&lt;br /&gt;&quot;)  // output: falsetest = new Boolean(0)document.write(test)document.write(&quot;&lt;br /&gt;&quot;)  // output: falsetest = new Boolean(false)  document.write(test)document.write(&quot;&lt;br /&gt;&quot;)  // output: falsetest = new Boolean(true)  document.write(test)document.write(&quot;&lt;br /&gt;&quot;)  // output: true</code></pre><ul><li>查看测试结果</li></ul><p><img src="https://uploadfiles.nowcoder.com/images/20210817/838378582_1629200064609/468DD5DDE04AEED9D181C17F0FEED120" alt="图片说明" title="图片标题"> </p>]]></content>
    
    
    <summary type="html">《JavaScript 学习笔记 之 日常练习案例》</summary>
    
    
    
    <category term="JavaScript" scheme="https://yk-ddm.github.io/categories/JavaScript/"/>
    
    
    <category term="HTML" scheme="https://yk-ddm.github.io/tags/HTML/"/>
    
    <category term="CSS" scheme="https://yk-ddm.github.io/tags/CSS/"/>
    
    <category term="JavaScript" scheme="https://yk-ddm.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
